// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array powersOfTwo;
    static boolean color;
    /** Initializes the Screen. */
    function void init() {
        let powersOfTwo = Array.new(16);
        let powersOfTwo[0] = 1;
        let powersOfTwo[1] = 2;
        let powersOfTwo[2] = 4;
        let powersOfTwo[3] = 8;
        let powersOfTwo[4] = 16;
        let powersOfTwo[5] = 32;
        let powersOfTwo[6] = 64;
        let powersOfTwo[7] = 128;
        let powersOfTwo[8] = 256;
        let powersOfTwo[9] = 512;
        let powersOfTwo[10] = 1024;
        let powersOfTwo[11] = 2048;
        let powersOfTwo[12] = 4096;
        let powersOfTwo[13] = 8192;
        let powersOfTwo[14] = 16384;
        let powersOfTwo[15] = 32767+1; 
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var boolean oldclr;
        let oldclr = color;
        do Screen.setColor(false);
        do Screen.drawRectangle(0, 0, 511, 255);
        let color = oldclr;
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, i;
        let address = (32 * y) + (x / 16);
        let value = Memory.peek(16384 + address);
        let i = x - ((x / 16) * 16);
        if(color) {
            let value = value | powersOfTwo[i];
        } else {
            let value = value & (~powersOfTwo[i]);
        }
        do Memory.poke(16384 + address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, diff, x, y;
        if(x1 = x2) {
            let y = Math.min(y1, y2);
            let dy = Math.abs(y1 - y2);
            let b = Math.max(y1, y2);
            while (y < (b + 1)) {
                do Screen.drawPixel(x1, y);
                let y = y + 1;
            }
            return;
        }
        if(y1 = y2) {
            let x = Math.min(x1, x2);
            let dx = Math.abs(x1 - x2);
            let a = Math.max(x1, x2);
            while (x < (a + 1)) {
                do Screen.drawPixel(x, y1);
                let x = x + 1;
            }
            return;
        }
        let dx = Math.abs(x2 - x1);
        let dy = Math.abs(y2 - y1);
        let a = 0;
        let b = 0;
        let diff = 0;  // b / a < dy / dx -> b++
        while((~(a > dx)) & (~(b > dy))) {
            if(x2 > x1) {
                let x = x1 + a;
            } else {
                let x = x1 - a;
            }
            if(y2 > y1) {
                let y = y1 + b;
            } else {
                let y = y1 - b;
            }
            do Screen.drawPixel(x, y);
            if (diff < 0) { // a++
                let a = a + 1;
                let diff = diff + dy;
            } else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dx, dy, x, y, i;
        if(x1 > x2) {
            let dx = x1 - x2;
            let x = x2;
        } else {
            let dx = x2 - x1;
            let x = x1;
        }
        if(y1 > y2) {
            let dy = y1 - y2;
            let y = y2;
        } else {
            let dy = y2 - y1;
            let y = y1;
        }
        let i = 0;
        while (i < (dy + 1)) {
            do Screen.drawLine(x, y + i, x + dx, y + i);
            let i = i + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy;
        let dy = -r;
        while(dy < (r + 1)) {
            let dx = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawLine(x - dx, y + dy, x + dx, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}

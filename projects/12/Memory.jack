// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array RAM;
    static Array heap;
    static Array freelist;

    /** Initializes the class. */
    function void init() {
        let RAM = 0;
        let heap = 2048;
        let freelist = 2048;
        let heap[0] = 0;
        let heap[1] = 14335;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return RAM[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let RAM[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array next, ret;
        let next = freelist;
        while(~(next = 0)) {
            if(~(next[1] < (size + 2))) {
                let next[1] = (next[1] - size - 2);
                let ret = (next + next[1] + 1);
                let ret[1] = size;
                return (ret + 2);
            }
            let next = next[0];
        }
        return 32767;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let o = o - 2;
        let o[0] = freelist;
        let freelist = o;
        return;
    }    
}

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//// Replace this comment with your code.

    // ALU immediately calculates according to input registers and instruction.
    Mux16(a = regAOut, b = inM, sel = instruction[12], out = inALU);
    ALU(x = regDOut, y = inALU, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = outALU, out = outM, zr = zrALU, ng = ngALU);
    Mux16(a[0..14] = instruction[0..14], a[15] = false, b = outALU, sel = instruction[15], out = regAIn);
    Not(in = instruction[5], out = notDestA);
    Nand(a = instruction[15], b = notDestA, out = loadA);
    ARegister(in = regAIn, load = loadA, out = regAOut, out[0..14] = addressM);
    And(a = instruction[15], b = instruction[4], out = loadD);
    DRegister(in = outALU, load = loadD, out = regDOut);
    And(a = instruction[3], b = instruction[15], out = writeM);
    Or(a = zrALU, b = ngALU, out = notPsALU);
    Not(in = notPsALU, out = psALU);
    And(a = instruction[0], b = psALU, out = jmpGT);
    And(a = instruction[1], b = zrALU, out = jmpEQ);
    And(a = instruction[2], b = ngALU, out = jmpLT);
    Or(a = jmpGT, b = jmpEQ, out = jmpTmp);
    Or(a = jmpTmp, b = jmpLT, out = jmpTmp2);
    And(a = jmpTmp2, b = instruction[15], out = loadPC);
    PC(in = regAOut, load = loadPC, inc = true, reset = reset, out[0..14] = pc);
}